9A0E0里面对hmac的 key进行异或0x36 0x5c
然后进到sub_9B1E0 里面有sha1的初始hash值
然后9AFCE 以及sub_9AF36都是sha1的运算
r0
0000: 01 23 45 67 89 AB CD EF FE DC BA 98 76 54 32 10    .#Eg........vT2.
0010: F0 E1 D2 C3 00 00 00 00 00 00 00 00 00 00 00 00    ................
0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
0060: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00    ................
r1
0000: 06 50 53 50 55 00 03 01 52 01 0F 50 03 05 00 50    .PSPU...R..P...P
0010: 57 05 07 55 0E 07 02 0F 0E 06 03 0E 04 02 06 54    W..U...........T
0020: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36    6666666666666666
0030: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36    6666666666666666
0040: 61 61 61 61 61 72 2F 72 65 6C 65 61 73 65 2D 6B    aaaaar/release-k
0050: 65 79 73 00 00 00 00 00 00 00 00 00 00 00 00 00    eys.............
0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
r2
0x45

9B030是sha1运算过程 改名sha1_process(9B1C8 结束)  0xbffff01c 里面是结果
9B030几次循环结果
r0
0000: 01 23 45 67 89 AB CD EF FE DC BA 98 76 54 32 10    .#Eg........vT2.
0010: F0 E1 D2 C3 00 02 00 00 00 00 00 00 06 50 53 50    .............PSP
0020: 55 00 03 01 52 01 0F 50 03 05 00 50 57 05 07 55    U...R..P...PW..U
0030: 0E 07 02 0F 0E 06 03 0E 04 02 06 54 36 36 36 36    ...........T6666
0040: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36    6666666666666666
0050: 36 36 36 36 36 36 36 36 36 36 36 36 40 00 00 00    666666666666@...
0060: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00    ................
r5
0000: EE 32 74 2E EE AD 69 17 C4 E9 5D F2 0F 80 75 85    .2t...i...]...u.
0010: B1 39 2F C1 00 02 00 00 00 00 00 00 06 50 53 50    .9/..........PSP
0020: 55 00 03 01 52 01 0F 50 03 05 00 50 57 05 07 55    U...R..P...PW..U
0030: 0E 07 02 0F 0E 06 03 0E 04 02 06 54 36 36 36 36    ...........T6666
0040: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36    6666666666666666
0050: 36 36 36 36 36 36 36 36 36 36 36 36 00 00 00 00    666666666666....
0060: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00    ................
r0
0000: EE 32 74 2E EE AD 69 17 C4 E9 5D F2 0F 80 75 85    .2t...i...]...u.
0010: B1 39 2F C1 28 02 00 00 00 00 00 00 61 62 63 64    .9/.(.......abcd
0020: 65 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00    e...............
0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
0050: 00 00 00 00 00 00 00 00 00 00 02 28 38 00 00 00    ...........(8...
0060: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00    ................
r5
0000: BF D8 EB DB 75 AF 51 B8 78 4A 18 D1 62 BD 3A 09    ....u.Q.xJ..b.:.
0010: 1E D3 B8 55 28 02 00 00 00 00 00 00 61 62 63 64    ...U(.......abcd
0020: 65 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00    e...............
0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
0050: 00 00 00 00 00 00 00 00 00 00 02 28 00 00 00 00    ...........(....
0060: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00    ................
r0
0000: 01 23 45 67 89 AB CD EF FE DC BA 98 76 54 32 10    .#Eg........vT2.
0010: F0 E1 D2 C3 00 02 00 00 00 00 00 00 6C 3A 39 3A    ............l:9:
0020: 3F 6A 69 6B 38 6B 65 3A 69 6F 6A 3A 3D 6F 6D 3F    ?jik8ke:ioj:=om?
0030: 64 6D 68 65 64 6C 69 64 6E 68 6C 3E 5C 5C 5C 5C    dmhedlidnhl>\\\\
0040: 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C    \\\\\\\\\\\\\\\\
0050: 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 40 00 00 00    \\\\\\\\\\\\@...
0060: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00    ................
r5
0000: AD 96 E6 46 C5 E2 7D D1 A9 92 E8 AC AE 08 46 75    ...F..}.......Fu
0010: 79 6C 71 D0 00 02 00 00 00 00 00 00 6C 3A 39 3A    ylq.........l:9:
0020: 3F 6A 69 6B 38 6B 65 3A 69 6F 6A 3A 3D 6F 6D 3F    ?jik8ke:ioj:=om?
0030: 64 6D 68 65 64 6C 69 64 6E 68 6C 3E 5C 5C 5C 5C    dmhedlidnhl>\\\\
0040: 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C    \\\\\\\\\\\\\\\\
0050: 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 5C 00 00 00 00    \\\\\\\\\\\\....
0060: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00    ................
r0
0000: AD 96 E6 46 C5 E2 7D D1 A9 92 E8 AC AE 08 46 75    ...F..}.......Fu
0010: 79 6C 71 D0 A0 02 00 00 00 00 00 00 DB EB D8 BF    ylq.............
0020: B8 51 AF 75 D1 18 4A 78 09 3A BD 62 55 B8 D3 1E    .Q.u..Jx.:.bU...
0030: 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
0050: 00 00 00 00 00 00 00 00 00 00 02 A0 38 00 00 00    ............8...
0060: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00    ................
r5 0xbffff01c
0000: FE 33 50 47 72 FF 9E 72 86 66 15 F1 FE 1C 21 EB    .3PGr..r.f....!.
0010: 8E C0 E0 8D A0 02 00 00 00 00 00 00 DB EB D8 BF    ................
0020: B8 51 AF 75 D1 18 4A 78 09 3A BD 62 55 B8 D3 1E    .Q.u..Jx.:.bU...
0030: 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
0050: 00 00 00 00 00 00 00 00 00 00 02 A0 00 00 00 00    ................
0060: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00    ................

sub_9B1E0后续会把结果从按字节反转一下存到0xbffff190
sub_9A0E0里面跳出来到sub_9A3C8
里面的sub_B46DC会调用0x400b4361这个地址的函数然后把结果存到0x402cd600
可以通过

emulator.traceRead(0xbffff190L,0xbffff190L+20);
0xbffff190, data size = 1, data value = 0x6b pc=RX@0x401996a4[libc.so]0x176a4 lr=RX@0x400b439b[libmain.so]0xb439b
进到0xb439b看看
后来数据会转移到0x402cd600 不知道什么时候
[17:09:29 737] Memory WRITE at 0x402cd600, data size = 1, data value = 0x6b pc=RX@0x401996a8[libc.so]0x176a8 lr=RX@0x400b439b[libmain.so]0xb439b
[17:09:29 737] Memory WRITE at 0x402cd601, data size = 1, data value = 0x3b pc=RX@0x401996a8[libc.so]0x176a8 lr=RX@0x400b439b[libmain.so]0xb439b
[17:09:29 737] Memory WRITE at 0x402cd602, data size = 1, data value = 0x26 pc=RX@0x401996a8[libc.so]0x176a8 lr=RX@0x400b439b[libmain.so]0xb439b
[17:09:29 737] Memory WRITE at 0x402cd603, data size = 1, data value = 0x1 pc=RX@0x401996a8[libc.so]0x176a8 lr=RX@0x400b439b[libmain.so]0xb439b
[17:09:29 737] Memory WRITE at 0x402cd604, data size = 1, data value = 0x3c pc=RX@0x401996a8[libc.so]0x176a8

emulator.traceRead(0x402cd600,0x402cd600+20);
定位到sub_B0D34这个函数 分析一下 应该是对数据进行操作然后存到v5
结果是
0x402db090
0000: 36 62 33 62 32 36 30 31 33 63 64 34 33 32 39 65    6b3b26013cd4329e
0010: 62 35 30 64 36 61 65 35 61 62 30 62 64 33 36 65    b50d6ae5ab0bd36e
0020: 65 32 33 31 32 33 37 33 00 00 30 3D 00 00 00 00    e2312373..0=....
结果是把sha1的结果转化成为了16进制 注意上面演示的是abcde的sha1的结果这里演示的是aaaaa的结果
s1000的往下然后shr 36623362
可以看到0x4040c0a0里面有这个值
0000: 36 62 33 62 32 36 30 31 33 63 64 34 33 32 39 65    6b3b26013cd4329e
0010: 62 35 30 64 36 61 65 35 61 62 30 62 64 33 36 65    b50d6ae5ab0bd36e
0020: 65 32 33 31 32 33 37 33 26 30 66 65 66 63 36 35    e2312373&0fefc65
0030: 37 64 37 39 66 35 33 36 66 61 33 31 63 38 31 34    7d79f536fa31c814
0040: 39 38 30 35 38 32 34 30 62 00 00 00 00 00 00 00    98058240b.......
是sha结果加hmac的key
继续往下s的话可以看到
Heap matches: RW@0x402db090
Heap matches: RW@0x402e40f0
Heap matches: RW@0x402e4140
Heap matches: RW@0x4040c0a0
Heap matches: RW@0x4043a120
0x4043a120里面
0000: 36 62 33 62 32 36 30 31 33 63 64 34 33 32 39 65    6b3b26013cd4329e
0010: 62 35 30 64 36 61 65 35 61 62 30 62 64 33 36 65    b50d6ae5ab0bd36e
0020: 65 32 33 31 32 33 37 33 26 30 66 65 66 63 36 35    e2312373&0fefc65
0030: 37 64 37 39 66 35 33 36 66 61 33 31 63 38 31 34    7d79f536fa31c814
0040: 39 38 30 35 38 32 34 30 62 07 07 07 07 07 07 07    98058240b.......
就是 hmac_sha1 + & + hmac_sha1_key+pkcs7 填充的特征
然后trace 4043a120
找到0x6dc67

如果直接对0x4040c0a0 tracewrite 范围73的话
操作都是在libc里,不好确定地址 但是 &的写入是在libmain的 0xb43d1 进到这里面看看
B44E6存&
_B4360里存hmackey

然后traceread 0x4040c0a0 找到B47F8 对应函数sub_B47B0 r0=0x4040c0a0 r1=0x49
里面把数据存到0x402e40f0
trace 0x402e40f0 找到0xb439b
然后发现把数据存到0x402e4140里面了
接下来存到 0x4043a120
6ae82里面对0x4043a120进去读取 上下文有异或操作
这个时候m0x4043a120是有pkcs7 填充的
看一下0x4043a120的write
找到6dc67 没办法反编译断点6dc67这个看下调用栈
[0x40000000][0x4006a4f5][        libmain.so][0x6a4f5]
[0x40000000][0x4006a5fb][        libmain.so][0x6a5fb]
有个sub_6A864(*a1, *(_DWORD *)a1[1], a1[2], a1[4], a2);
有点绕 其实只要改掉就好了 看看0x402e40f0之前找到找到0xb439b看看这个调用栈 试试这里改
发现是和6dc67的调用栈是一个函数里面
定位到sub_b46dc 这里修改
不能在这里修改其他地方也有调用在外层修改
0x6A5E4

修改以后到之前的异或6ae82断点 根据代码 发现lr里面是iv 0000: 36 7A 69 38 74 65 79 34 33 32 38 54 63 55 68 31    6zi8tey4328TcUh1
源数据修改以后变成09 08 06 0D 0D 0D 0D 0D 0D 0D 0D 0D 0D 0D 0D 0D
异或结果存到402dad40
继续往下分析 对402dad40进行traceread 在6afd0处找到读操作 此时不是按照顺序读取的 是按照*4读取的
读取结果存到0xbffff050开始的堆栈 3f 79 3e 6e 72 68 3f 58 ....
猜测6A864这个函数里面应该是整个aes的流程 因为aes结果的调用栈也是
[0x40000000][0x4006a4f5][        libmain.so][0x6a4f5]
[0x40000000][0x4006a5fb][        libmain.so][0x6a5fb]
对0xbffff050的trace read和write要同时进行 因为每次的值不一样
0xbffff050的读取和写入
0x6bb12 进行读取顺序是0 1 2 3 5 6 7 4 a b 8 9 f c d e
然后6bf94写入一次 6c10c写入三次
这个读取写入总共循环9次
然后b439b 读取
6c4ef写入 这次写入会剔除时间戳的影响
6cdbe读取
6c930先反复16次写入0 再写入正确的值
这个aes中间9轮混杂了时间戳 所以中间9轮每次运行结果会不一样 但是如果固定时间戳 每次结果就是一致
但是不影响dfa攻击
dfa 在第9轮开始注入错误值
另外 结果用phionaes进行解析的时候 要注意这个需要转置
之前的"是按照*4读取" 是把输入转置了 结果要转回来才能破解
然后进行base64
再进行hmacsha1就是xsign